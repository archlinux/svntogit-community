From 0a545d0313b388d7c815c0091e04556502b65dd3 Mon Sep 17 00:00:00 2001
From: Ruslan Spivak <rspivak@Ruslans-MacBook-Air.local>
Date: Thu, 25 Apr 2013 21:27:39 -0400
Subject: [PATCH 1/8] Make tests work with nose test runner.

---
 src/slimit/tests/test_ecmavisitor.py | 33 +++++++++++++----------
 src/slimit/tests/test_lexer.py       | 33 ++++++++++++-----------
 src/slimit/tests/test_mangler.py     | 39 +++++++++++++++-------------
 src/slimit/tests/test_minifier.py    | 31 ++++++++++++++--------
 src/slimit/tests/test_parser.py      | 35 ++++++++++++++-----------
 5 files changed, 98 insertions(+), 73 deletions(-)

diff --git a/src/slimit/tests/test_ecmavisitor.py b/src/slimit/tests/test_ecmavisitor.py
index e82c96f..65dfce2 100644
--- a/src/slimit/tests/test_ecmavisitor.py
+++ b/src/slimit/tests/test_ecmavisitor.py
@@ -30,6 +30,25 @@ import unittest
 from slimit.parser import Parser
 
 
+def decorator(cls):
+    def make_test_function(input, expected):
+
+        def test_func(self):
+            parser = Parser()
+            result = parser.parse(input).to_ecma()
+            self.assertMultiLineEqual(result, expected)
+
+        return test_func
+
+    for index, input in enumerate(cls.TEST_CASES):
+        input = textwrap.dedent(input).strip()
+        func = make_test_function(input, input)
+        setattr(cls, 'test_case_%d' % index, func)
+
+    return cls
+
+
+@decorator
 class ECMAVisitorTestCase(unittest.TestCase):
 
     def setUp(self):
@@ -483,18 +502,4 @@ class ECMAVisitorTestCase(unittest.TestCase):
         """,
         ]
 
-def make_test_function(input, expected):
-
-    def test_func(self):
-        parser = Parser()
-        result = parser.parse(input).to_ecma()
-        self.assertMultiLineEqual(result, expected)
-
-    return test_func
-
-for index, input in enumerate(ECMAVisitorTestCase.TEST_CASES):
-    input = textwrap.dedent(input).strip()
-    func = make_test_function(input, input)
-    setattr(ECMAVisitorTestCase, 'test_case_%d' % index, func)
-
 
diff --git a/src/slimit/tests/test_lexer.py b/src/slimit/tests/test_lexer.py
index de703a1..922d628 100644
--- a/src/slimit/tests/test_lexer.py
+++ b/src/slimit/tests/test_lexer.py
@@ -33,8 +33,26 @@ import pprint
 from slimit.lexer import Lexer
 
 
+def decorator(cls):
+    def make_test_function(input, expected):
+
+        def test_func(self):
+            lexer = self._get_lexer()
+            lexer.input(input)
+            result = ['%s %s' % (token.type, token.value) for token in lexer]
+            self.assertListEqual(result, expected)
+
+        return test_func
+
+    for index, (input, expected) in enumerate(cls.TEST_CASES):
+        func = make_test_function(input, expected)
+        setattr(cls, 'test_case_%d' % index, func)
+
+    return cls
+
 # The structure and some test cases are taken
 # from https://bitbucket.org/ned/jslex
+@decorator
 class LexerTestCase(unittest.TestCase):
 
     def _get_lexer(self):
@@ -269,21 +287,6 @@ world"''',
         ]
 
 
-def make_test_function(input, expected):
-
-    def test_func(self):
-        lexer = self._get_lexer()
-        lexer.input(input)
-        result = ['%s %s' % (token.type, token.value) for token in lexer]
-        self.assertListEqual(result, expected)
-
-    return test_func
-
-for index, (input, expected) in enumerate(LexerTestCase.TEST_CASES):
-    func = make_test_function(input, expected)
-    setattr(LexerTestCase, 'test_case_%d' % index, func)
-
-
 def test_suite():
     return unittest.TestSuite((
         unittest.makeSuite(LexerTestCase),
diff --git a/src/slimit/tests/test_mangler.py b/src/slimit/tests/test_mangler.py
index 4784d84..111429e 100644
--- a/src/slimit/tests/test_mangler.py
+++ b/src/slimit/tests/test_mangler.py
@@ -31,6 +31,27 @@ from slimit.parser import Parser
 from slimit.mangler import mangle
 
 
+def decorator(cls):
+    def make_test_function(input, expected):
+        def test_func(self):
+            parser = Parser()
+            tree = parser.parse(input)
+            mangle(tree, toplevel=True)
+            self.assertMultiLineEqual(
+                textwrap.dedent(tree.to_ecma()).strip(),
+                textwrap.dedent(expected).strip()
+                )
+
+        return test_func
+
+    for index, (input, expected) in enumerate(cls.TEST_CASES):
+        func = make_test_function(input, expected)
+        setattr(cls, 'test_case_%d' % index, func)
+
+    return cls
+
+
+@decorator
 class ManglerTestCase(unittest.TestCase):
 
     TEST_CASES = [
@@ -136,21 +157,3 @@ class ManglerTestCase(unittest.TestCase):
          }
          """),
         ]
-
-
-def make_test_function(input, expected):
-
-    def test_func(self):
-        parser = Parser()
-        tree = parser.parse(input)
-        mangle(tree, toplevel=True)
-        self.assertMultiLineEqual(
-            textwrap.dedent(tree.to_ecma()).strip(),
-            textwrap.dedent(expected).strip()
-            )
-
-    return test_func
-
-for index, (input, expected) in enumerate(ManglerTestCase.TEST_CASES):
-    func = make_test_function(input, expected)
-    setattr(ManglerTestCase, 'test_case_%d' % index, func)
diff --git a/src/slimit/tests/test_minifier.py b/src/slimit/tests/test_minifier.py
index 9f3bca0..e1b3e1d 100644
--- a/src/slimit/tests/test_minifier.py
+++ b/src/slimit/tests/test_minifier.py
@@ -29,6 +29,22 @@ import unittest
 from slimit import minify
 
 
+def decorator(cls):
+    def make_test_function(input, expected):
+
+        def test_func(self):
+            self.assertMinified(input, expected)
+
+        return test_func
+
+    for index, (input, expected) in enumerate(cls.TEST_CASES):
+        func = make_test_function(input, expected)
+        setattr(cls, 'test_case_%d' % index, func)
+
+    return cls
+
+
+@decorator
 class MinifierTestCase(unittest.TestCase):
 
     def assertMinified(self, source, expected):
@@ -418,16 +434,9 @@ class MinifierTestCase(unittest.TestCase):
           'set fullName(name){var names=name.split(" ");this.first=names[0];'
           'this.last=names[1];}};')
         ),
+
+        ('testObj[":"] = undefined;', 'testObj[":"]=undefined;'),
+        ('testObj["::"] = undefined;', 'testObj["::"]=undefined;'),
+
         ]
 
-
-def make_test_function(input, expected):
-
-    def test_func(self):
-        self.assertMinified(input, expected)
-
-    return test_func
-
-for index, (input, expected) in enumerate(MinifierTestCase.TEST_CASES):
-    func = make_test_function(input, expected)
-    setattr(MinifierTestCase, 'test_case_%d' % index, func)
diff --git a/src/slimit/tests/test_parser.py b/src/slimit/tests/test_parser.py
index 911da30..f0e98fe 100644
--- a/src/slimit/tests/test_parser.py
+++ b/src/slimit/tests/test_parser.py
@@ -32,6 +32,25 @@ from slimit.parser import Parser
 from slimit.visitors import nodevisitor
 
 
+def decorator(cls):
+    def make_test_function(input, expected):
+
+        def test_func(self):
+            parser = Parser()
+            result = parser.parse(input).to_ecma()
+            self.assertMultiLineEqual(result, expected)
+
+        return test_func
+
+    for index, (input, expected) in enumerate(cls.TEST_CASES):
+        input = textwrap.dedent(input).strip()
+        expected = textwrap.dedent(expected).strip()
+        func = make_test_function(input, expected)
+        setattr(cls, 'test_case_%d' % index, func)
+
+    return cls
+
+
 class ParserTestCase(unittest.TestCase):
 
     def test_line_terminator_at_the_end_of_file(self):
@@ -97,6 +116,7 @@ class ParserTestCase(unittest.TestCase):
         self.assertRaises(SyntaxError, parser.parse, text)
 
 
+@decorator
 class ASITestCase(unittest.TestCase):
     TEST_CASES = [
         ("""
@@ -220,19 +240,4 @@ class ASITestCase(unittest.TestCase):
         self.assertRaises(SyntaxError, parser.parse, input)
 
 
-def make_test_function(input, expected):
-
-    def test_func(self):
-        parser = Parser()
-        result = parser.parse(input).to_ecma()
-        self.assertMultiLineEqual(result, expected)
-
-    return test_func
-
-for index, (input, expected) in enumerate(ASITestCase.TEST_CASES):
-    input = textwrap.dedent(input).strip()
-    expected = textwrap.dedent(expected).strip()
-    func = make_test_function(input, expected)
-    setattr(ASITestCase, 'test_case_%d' % index, func)
-
 
-- 
2.25.0

