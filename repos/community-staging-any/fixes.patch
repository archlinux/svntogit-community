diff --git a/gg/actor.py b/gg/actor.py
index 41a6081..a57f589 100644
--- a/gg/actor.py
+++ b/gg/actor.py
@@ -41,11 +41,6 @@ MAP_DESCS = [
      'http://creativecommons.org/licenses/by-sa/2.0/',
      'http://tile.xn--pnvkarte-m4a.de/tilegen/#Z#/#X#/#Y#.png'],
 
-    ['mapquest-osm', 'MapQuest OSM', 0, 17, 256,
-     'Map data provided by MapQuest, Open Street Map and contributors',
-     'http://creativecommons.org/licenses/by-sa/2.0/',
-     'http://otile1.mqcdn.com/tiles/1.0.0/osm/#Z#/#X#/#Y#.png'],
-
     ['mff-relief', 'Maps for Free Relief', 0, 11, 256,
      'Map data available under GNU Free Documentation license, v1.2 or later',
      'http://www.gnu.org/copyleft/fdl.html',
diff --git a/gg/app.py b/gg/app.py
index 28440b8..7269ee5 100644
--- a/gg/app.py
+++ b/gg/app.py
@@ -70,8 +70,6 @@ def startup(self):
     Binding(center, 'coords', CoordLabel, 'text')
     center.timeout_seconds = 10  # Only update titlebar every 10 seconds
 
-    screen = Gdk.Screen.get_default()
-
     # Toolbar bindings.
     click_handlers = {
         'open':
@@ -86,16 +84,13 @@ def startup(self):
         'about':
             lambda *ignore: Widgets.about.run() and Widgets.about.hide(),
         'help':
-            lambda *ignore: Gtk.show_uri(
-                screen, 'help:gottengeography', Gdk.CURRENT_TIME),
+            self.open_help,
         'jump':
             self.jump_to_photo,
         'apply':
             self.apply_selected_photos,
         'map_source_menu':
-            lambda *ignore: Gtk.show_uri(
-                screen, 'http://maps.google.com/maps?q={},{}'.format(
-                    center.latitude, center.longitude), Gdk.CURRENT_TIME),
+            self.map_source_menu,
     }
     for name, handler in click_handlers.items():
         button = Widgets[name + '_button']
@@ -218,6 +213,22 @@ class GottenGeography(Gtk.Application):
             MapView.emit('realize')
             MapView.center_on(photo.latitude, photo.longitude)
 
+    def open_help(self, *ignore):
+        screen = Gdk.Screen.get_default()
+        try:
+            Gtk.show_uri(screen, 'help:gottengeography', Gdk.CURRENT_TIME),
+        except GLib.GError:
+            pass
+
+    def map_source_menu(self, *ignore):
+        screen = Gdk.Screen.get_default()
+        lat, lon = MapView.get_center_latitude(), MapView.get_center_longitude()
+        try:
+            Gtk.show_uri(screen, 'http://maps.google.com/maps?q={},{}'.format(
+                lat, lon), Gdk.CURRENT_TIME),
+        except GLib.GError:
+            pass
+
     def update_preview(self, chooser, image):
         """Display photo thumbnail and geotag data in file chooser."""
         image.set_from_stock(Gtk.STOCK_FILE, Gtk.IconSize.DIALOG)
diff --git a/gg/xmlfiles.py b/gg/xmlfiles.py
index b04a193..da73b0d 100644
--- a/gg/xmlfiles.py
+++ b/gg/xmlfiles.py
@@ -12,7 +12,7 @@ from re import compile as re_compile
 from gettext import gettext as _
 from os.path import basename
 from calendar import timegm
-from time import clock
+from time import perf_counter
 
 from gg.camera import Camera
 from gg.gpsmath import Coordinates
@@ -197,7 +197,7 @@ class TrackFile():
         Also time everything and report how long it took. Raises OSError if
         the file extension is unknown, or no track points were found.
         """
-        start_time = clock()
+        start_time = perf_counter()
 
         try:
             gpx = globals()[uri[-3:].upper() + 'File'](uri)
@@ -206,7 +206,7 @@ class TrackFile():
 
         Widgets.status_message(
             _('%d points loaded in %.2fs.') %
-            (len(gpx.tracks), clock() - start_time), True)
+            (len(gpx.tracks), perf_counter() - start_time), True)
 
         if len(gpx.tracks) < 2:
             return
@@ -227,7 +227,7 @@ class TrackFile():
         self.widgets = Builder('trackfile')
         self.append = None
         self.tracks = {}
-        self.clock = clock()
+        self.clock = perf_counter()
 
         self.gst = GSettings('trackfile', basename(filename))
         if self.gst.get_string('start-timezone') is '':
@@ -283,11 +283,11 @@ class TrackFile():
 
     def element_end(self, name=None, state=None):
         """Occasionally redraw the screen so the user can see activity."""
-        if clock() - self.clock > .2:
+        if perf_counter() - self.clock > .2:
             self.progress.pulse()
             while Gtk.events_pending():
                 Gtk.main_iteration()
-            self.clock = clock()
+            self.clock = perf_counter()
 
     def destroy(self, button=None):
         """Die a horrible death."""
