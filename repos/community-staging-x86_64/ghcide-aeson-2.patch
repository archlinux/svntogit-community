From 2625689ad4308f5ca207b24fbec2a569ed229347 Mon Sep 17 00:00:00 2001
From: Javier Neira <atreyu.bbb@gmail.com>
Date: Wed, 12 Jan 2022 17:24:53 +0100
Subject: [PATCH] Add support for brittany (needs aeson-2) and floskell with
 ghc-9.0.1 (#2551)

* Enable tests for brittany and 9.0.2

* Enable tests for floskell plugin

* cabal-ghc901.project: naively enable brittany

* haskell-language-server.cabal: bump brittany flag <(9.0.1->9.2.1)

* Trying to add support for brittany

* Use last hackage floskell version

* Activate floskell in func-test suite

* Restrict brittany in hackage for ghc<9.0.1

* Adapt to Aeson.Key

* Update lsp source repo package

* Refer pr for butcher

* Add missing prefix

* Adapt to aeson-2 (incomplete)

* Use compat module

* Support for aeson-2 and extra-1.7.10

* Remove lsp

* Allow newer aeson for stylish-haskell

* Add needed import for non windows

* Remove insertJson and toJsonKey

* Update cabal-ghc901.project

* Missing import

* Avoid CPP by using lens-aeson

* Update hls-plugin-api/src/Ide/Plugin/ConfigUtils.hs

* Use ghcide compat module

* Use type alias in cpp

* Fix stack build for ghc-8.6.5

* Use lens-aeson key

* Use lens-aeson in func-test

* Fixup shake-bench

* Update docs

* Switch to lens ix

* Try this

Co-authored-by: Anton-Latukha <anton.latukha@gmail.com>
Co-authored-by: Michael Peyton Jones <me@michaelpj.com>
Co-authored-by: mergify[bot] <37929162+mergify[bot]@users.noreply.github.com>
---
 .github/workflows/test.yml                    |  2 +-
 cabal-ghc901.project                          | 15 ++++---
 ghcide/ghcide.cabal                           |  3 +-
 ghcide/src/Control/Concurrent/Strict.hs       | 11 +++---
 ghcide/src/Development/IDE/GHC/Orphans.hs     | 23 ++++++-----
 haskell-language-server.cabal                 |  5 ++-
 hls-plugin-api/hls-plugin-api.cabal           |  1 +
 hls-plugin-api/src/Ide/Plugin/ConfigUtils.hs  | 39 +++++++++----------
 hls-plugin-api/src/Ide/Plugin/Properties.hs   | 27 ++++++-------
 hls-plugin-api/src/Ide/Types.hs               |  2 +-
 .../hls-brittany-plugin.cabal                 |  1 -
 .../src/Ide/Plugin/Brittany.hs                | 32 ++++++++-------
 shake-bench/shake-bench.cabal                 |  2 +
 .../src/Development/Benchmark/Rules.hs        | 31 ++++++++-------
 stack-8.10.6.yaml                             |  2 +
 stack-8.10.7.yaml                             |  2 +
 stack-8.6.5.yaml                              |  5 ++-
 stack-8.8.4.yaml                              |  3 +-
 stack-9.0.1.yaml                              | 12 ++++--
 stack.yaml                                    |  2 +
 test/functional/FunctionalCodeAction.hs       | 20 +++++-----
 21 files changed, 134 insertions(+), 106 deletions(-)

diff --git a/ghcide/src/Control/Concurrent/Strict.hs b/ghcide/src/Control/Concurrent/Strict.hs
index 2a33e5284b..842252d51c 100644
--- a/ghcide/src/Control/Concurrent/Strict.hs
+++ b/ghcide/src/Control/Concurrent/Strict.hs
@@ -4,25 +4,26 @@ module Control.Concurrent.Strict
     ,module Control.Concurrent.Extra
     ) where
 
-import           Control.Concurrent.Extra hiding (modifyVar, modifyVar_)
+import           Control.Concurrent.Extra hiding (modifyVar, modifyVar',
+                                           modifyVar_)
 import qualified Control.Concurrent.Extra as Extra
 import           Control.Exception        (evaluate)
 import           Control.Monad            (void)
 import           Data.Tuple.Extra         (dupe)
 
 -- | Strict modification that returns the new value
-modifyVar' :: Var a -> (a -> a) -> IO a
+modifyVar' :: Extra.Var a -> (a -> a) -> IO a
 modifyVar' var upd = modifyVarIO' var (pure . upd)
 
 -- | Strict modification that returns the new value
-modifyVarIO' :: Var a -> (a -> IO a) -> IO a
+modifyVarIO' :: Extra.Var a -> (a -> IO a) -> IO a
 modifyVarIO' var upd = do
     res <- Extra.modifyVar var $ \v -> do
         v' <- upd v
         pure $ dupe v'
     evaluate res
 
-modifyVar :: Var a -> (a -> IO (a, b)) -> IO b
+modifyVar :: Extra.Var a -> (a -> IO (a, b)) -> IO b
 modifyVar var upd = do
     (new, res) <- Extra.modifyVar var $ \old -> do
         (new,res) <- upd old
@@ -30,5 +31,5 @@ modifyVar var upd = do
     void $ evaluate new
     return res
 
-modifyVar_ :: Var a -> (a -> IO a) -> IO ()
+modifyVar_ :: Extra.Var a -> (a -> IO a) -> IO ()
 modifyVar_ var upd = void $ modifyVarIO' var upd
diff --git a/ghcide/src/Development/IDE/GHC/Orphans.hs b/ghcide/src/Development/IDE/GHC/Orphans.hs
index a04fd1e86d..50aaa544ac 100644
--- a/ghcide/src/Development/IDE/GHC/Orphans.hs
+++ b/ghcide/src/Development/IDE/GHC/Orphans.hs
@@ -36,7 +36,6 @@ import           Control.DeepSeq
 import           Data.Aeson
 import           Data.Hashable
 import           Data.String                (IsString (fromString))
-import           Data.Text                  (Text)
 
 -- Orphan instances for types from the GHC API.
 instance Show CoreModule where show = prettyPrint
@@ -122,7 +121,7 @@ instance NFData RealSrcSpan where
     rnf = rwhnf
 
 srcSpanFileTag, srcSpanStartLineTag, srcSpanStartColTag,
-    srcSpanEndLineTag, srcSpanEndColTag :: Text
+    srcSpanEndLineTag, srcSpanEndColTag :: String
 srcSpanFileTag = "srcSpanFile"
 srcSpanStartLineTag = "srcSpanStartLine"
 srcSpanStartColTag = "srcSpanStartCol"
@@ -132,24 +131,24 @@ srcSpanEndColTag = "srcSpanEndCol"
 instance ToJSON RealSrcSpan where
   toJSON spn =
       object
-        [ srcSpanFileTag .= unpackFS (srcSpanFile spn)
-        , srcSpanStartLineTag .= srcSpanStartLine spn
-        , srcSpanStartColTag .= srcSpanStartCol spn
-        , srcSpanEndLineTag .= srcSpanEndLine spn
-        , srcSpanEndColTag .= srcSpanEndCol spn
+        [ fromString srcSpanFileTag .= unpackFS (srcSpanFile spn)
+        , fromString srcSpanStartLineTag .= srcSpanStartLine spn
+        , fromString srcSpanStartColTag .= srcSpanStartCol spn
+        , fromString srcSpanEndLineTag .= srcSpanEndLine spn
+        , fromString srcSpanEndColTag .= srcSpanEndCol spn
         ]
 
 instance FromJSON RealSrcSpan where
   parseJSON = withObject "object" $ \obj -> do
-      file <- fromString <$> (obj .: srcSpanFileTag)
+      file <- fromString <$> (obj .: fromString srcSpanFileTag)
       mkRealSrcSpan
         <$> (mkRealSrcLoc file
-                <$> obj .: srcSpanStartLineTag
-                <*> obj .: srcSpanStartColTag
+                <$> obj .: fromString srcSpanStartLineTag
+                <*> obj .: fromString srcSpanStartColTag
             )
         <*> (mkRealSrcLoc file
-                <$> obj .: srcSpanEndLineTag
-                <*> obj .: srcSpanEndColTag
+                <$> obj .: fromString srcSpanEndLineTag
+                <*> obj .: fromString srcSpanEndColTag
             )
 
 instance NFData Type where
