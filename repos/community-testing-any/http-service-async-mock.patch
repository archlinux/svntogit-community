diff --git a/tests/service_mocks/test_http_service_mock.py b/tests/service_mocks/test_http_service_mock.py
index bc04eb3..9f042f1 100644
--- a/tests/service_mocks/test_http_service_mock.py
+++ b/tests/service_mocks/test_http_service_mock.py
@@ -1,4 +1,4 @@
-from unittest.mock import MagicMock
+from unittest.mock import AsyncMock
 
 import requests
 
@@ -11,7 +11,7 @@ def test_http_service_mock():
         assert target.port == 8080
         mock = target.get_route_mock("/foo", methods=["POST"])
         mock.return_value = "bar", 201
-        assert isinstance(mock, MagicMock)
+        assert isinstance(mock, AsyncMock)
         response = requests.post(f"http://{target.host}:{target.port}/foo")
         assert response.status_code == 201
         assert response.content == b"bar"
@@ -23,7 +23,7 @@ def test_https_service_mock():
         assert target.port == 8080
         mock = target.get_route_mock("/foo", methods=["POST"])
         mock.return_value = "bar", 201
-        assert isinstance(mock, MagicMock)
+        assert isinstance(mock, AsyncMock)
         response = requests.post(f"https://{target.host}:{target.port}/foo",
                                  verify=False)
         assert response.status_code == 201
@@ -36,7 +36,7 @@ def test_http_service_mock_random_port():
         assert target.port in range(1024, 65535 + 1)
         mock = target.get_route_mock("/foo", methods=["POST"])
         mock.return_value = "bar", 201
-        assert isinstance(mock, MagicMock)
+        assert isinstance(mock, AsyncMock)
         response = requests.post(f"http://{target.host}:{target.port}/foo",
                                  verify=False)
         assert response.status_code == 201
diff --git a/threat9_test_bed/service_mocks/http_service_mock.py b/threat9_test_bed/service_mocks/http_service_mock.py
index a2cecd6..5642ef3 100644
--- a/threat9_test_bed/service_mocks/http_service_mock.py
+++ b/threat9_test_bed/service_mocks/http_service_mock.py
@@ -13,7 +13,7 @@ class HttpServiceMock(WerkzeugBasedHttpService):
         super().__init__(host, port, Flask("target"), ssl)
 
     def get_route_mock(self, rule, **options):
-        mocked_view = mock.MagicMock(name=rule, spec=lambda: None)
+        mocked_view = mock.AsyncMock(name=rule, spec=lambda: None)
         self.app.add_url_rule(rule,
                               endpoint=rule,
                               view_func=mocked_view,
