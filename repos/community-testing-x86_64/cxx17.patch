diff --color -aur xrootd-5.4.3-old/bindings/python/setup.py.in xrootd-5.4.3-new/bindings/python/setup.py.in
--- xrootd-5.4.3-old/bindings/python/setup.py.in	2022-06-13 16:17:49.244651243 +0300
+++ xrootd-5.4.3-new/bindings/python/setup.py.in	2022-06-13 16:19:50.844651430 +0300
@@ -24,15 +24,15 @@
 # Remove the "-Wstrict-prototypes" compiler option, which isn't valid for C++.
 cfg_vars = sysconfig.get_config_vars()
 opt = cfg_vars["OPT"]
-cfg_vars["OPT"] = " ".join( flag for flag in opt.split() if flag not in ['-Wstrict-prototypes' ${CLANG_PROHIBITED} ] ) + " --std=c++14"
+cfg_vars["OPT"] = " ".join( flag for flag in opt.split() if flag not in ['-Wstrict-prototypes' ${CLANG_PROHIBITED} ] ) + " --std=c++17"
 
 cflags = cfg_vars["CFLAGS"]
-cfg_vars["CFLAGS"] = " ".join( flag for flag in cflags.split() if flag not in ['-Wstrict-prototypes' ${CLANG_PROHIBITED} ] ) + " --std=c++14"
+cfg_vars["CFLAGS"] = " ".join( flag for flag in cflags.split() if flag not in ['-Wstrict-prototypes' ${CLANG_PROHIBITED} ] ) + " --std=c++17"
 
 # pypy doesn't define PY_CFLAGS so skip it if it's missing
 if "PY_CFLAGS" in cfg_vars:
   py_cflags = cfg_vars["PY_CFLAGS"]
-  cfg_vars["PY_CFLAGS"] = " ".join( flag for flag in py_cflags.split() if flag not in ['-Wstrict-prototypes' ${CLANG_PROHIBITED} ] ) + " --std=c++14"
+  cfg_vars["PY_CFLAGS"] = " ".join( flag for flag in py_cflags.split() if flag not in ['-Wstrict-prototypes' ${CLANG_PROHIBITED} ] ) + " --std=c++17"
 
 ccl=cfg_vars["CC"].split()
 ccl[0]="${CMAKE_C_COMPILER}"
diff --color -aur xrootd-5.4.3-old/cmake/XRootDOSDefs.cmake xrootd-5.4.3-new/cmake/XRootDOSDefs.cmake
--- xrootd-5.4.3-old/cmake/XRootDOSDefs.cmake	2022-06-13 16:17:49.247984576 +0300
+++ xrootd-5.4.3-new/cmake/XRootDOSDefs.cmake	2022-06-13 16:19:20.974651382 +0300
@@ -18,7 +18,7 @@
 #-------------------------------------------------------------------------------
 # Enable c++14
 #-------------------------------------------------------------------------------
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 17)
 
 if( ENABLE_ASAN )
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -fsanitize=address")
diff --color -aur xrootd-5.4.3-old/cmake/XRootDSystemCheck.cmake xrootd-5.4.3-new/cmake/XRootDSystemCheck.cmake
--- xrootd-5.4.3-old/cmake/XRootDSystemCheck.cmake	2022-06-13 16:17:49.247984576 +0300
+++ xrootd-5.4.3-new/cmake/XRootDSystemCheck.cmake	2022-06-13 16:22:48.487985058 +0300
@@ -144,7 +144,7 @@
 #-------------------------------------------------------------------------------
 function(check_working_cxx_atomics varname)
   set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
-  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -std=c++11")
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -std=c++17")
   check_cxx_source_compiles("
 #include <atomic>
 #include <cstdint>
Only in xrootd-5.4.3-old: omg
diff --color -aur xrootd-5.4.3-old/src/XrdCeph/cmake/XRootDOSDefs.cmake xrootd-5.4.3-new/src/XrdCeph/cmake/XRootDOSDefs.cmake
--- xrootd-5.4.3-old/src/XrdCeph/cmake/XRootDOSDefs.cmake	2022-06-13 16:17:49.251317910 +0300
+++ xrootd-5.4.3-new/src/XrdCeph/cmake/XRootDOSDefs.cmake	2022-06-13 16:21:05.804651570 +0300
@@ -11,7 +11,7 @@
 # GCC
 #-------------------------------------------------------------------------------
 if( CMAKE_COMPILER_IS_GNUCXX )
-  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
+  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17" )
   set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror" )
   set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter" )
   # gcc 4.1 is retarded
@@ -22,7 +22,7 @@
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-strict-aliasing" )
   endif()
 
-  # for 4.9.3 or greater the 'omit-frame-pointer' 
+  # for 4.9.3 or greater the 'omit-frame-pointer'
   # interfears  with custom semaphore implementation
   if( (GCC_VERSION VERSION_GREATER 4.9.2) AND (USE_LIBC_SEMAPHORE EQUAL 0) )
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer" )
diff --color -aur xrootd-5.4.3-old/src/XrdSsi/XrdSsiAtomics.hh xrootd-5.4.3-new/src/XrdSsi/XrdSsiAtomics.hh
--- xrootd-5.4.3-old/src/XrdSsi/XrdSsiAtomics.hh	2022-06-13 16:17:49.264651243 +0300
+++ xrootd-5.4.3-new/src/XrdSsi/XrdSsiAtomics.hh	2022-06-13 16:25:39.107985328 +0300
@@ -39,7 +39,7 @@
 #if __cplusplus >= 201103L
 #include <atomic>
 #define Atomic(type)    std::atomic<type>
-#define Atomic_IMP "C++11"
+#define Atomic_IMP "C++17"
 #define Atomic_BEG(x)
 #define Atomic_DEC(x)          x.fetch_sub(1,std::memory_order_relaxed)
 #define Atomic_GET(x)          x.load(std::memory_order_relaxed)
