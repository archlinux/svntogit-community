--- gnuradio-3.8.1.0/gnuradio-runtime/lib/block.cc~	2020-06-03 15:51:57.779451140 +0100
+++ gnuradio-3.8.1.0/gnuradio-runtime/lib/block.cc	2020-06-03 15:52:03.567451466 +0100
@@ -34,6 +34,8 @@
 
 namespace gr {
 
+using namespace boost::placeholders;
+
 block::block(const std::string& name,
              io_signature::sptr input_signature,
              io_signature::sptr output_signature)
--- gnuradio-3.8.1.0/gr-blocks/lib/copy_impl.cc~	2020-06-03 16:48:48.001299713 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/copy_impl.cc	2020-06-03 16:48:15.300285011 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 copy::sptr copy::make(size_t itemsize)
 {
     return gnuradio::get_initial_sptr(new copy_impl(itemsize));
--- gnuradio-3.8.1.0/gr-blocks/lib/message_debug_impl.cc~	2020-06-03 16:52:57.083411688 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/message_debug_impl.cc	2020-06-03 16:52:59.468412760 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 message_debug::sptr message_debug::make()
 {
     return gnuradio::get_initial_sptr(new message_debug_impl());
--- gnuradio-3.8.1.0/gr-blocks/lib/message_strobe_impl.cc~	2020-06-03 16:53:34.139428345 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/message_strobe_impl.cc	2020-06-03 16:53:35.651429024 +0100
@@ -38,6 +38,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 message_strobe::sptr message_strobe::make(pmt::pmt_t msg, long period_ms)
 {
     return gnuradio::get_initial_sptr(new message_strobe_impl(msg, period_ms));
--- gnuradio-3.8.1.0/gr-blocks/lib/message_strobe_random_impl.cc~	2020-06-03 16:53:52.959436804 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/message_strobe_random_impl.cc	2020-06-03 16:53:55.259437840 +0100
@@ -38,6 +38,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 message_strobe_random::sptr
 message_strobe_random::make(pmt::pmt_t msg,
                             message_strobe_random_distribution_t dist,
--- gnuradio-3.8.1.0/gr-blocks/lib/multiply_matrix_impl.cc~	2020-06-03 16:48:42.217297113 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/multiply_matrix_impl.cc	2020-06-03 16:48:44.149297981 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 // Copy tags from input k to output l if A[l][k] is not zero
 template <>
 void multiply_matrix_impl<gr_complex>::propagate_tags_by_A(int noutput_items,
--- gnuradio-3.8.1.0/gr-blocks/lib/mute_impl.cc~	2020-06-03 16:44:53.010194065 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/mute_impl.cc	2020-06-03 16:45:12.423202794 +0100
@@ -33,6 +33,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 template <class T>
 typename mute_blk<T>::sptr mute_blk<T>::make(bool mute)
 {
--- gnuradio-3.8.1.0/gr-blocks/lib/pdu_filter_impl.cc~	2020-06-03 16:55:05.835454141 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/pdu_filter_impl.cc	2020-06-03 16:55:08.074454516 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 pdu_filter::sptr pdu_filter::make(pmt::pmt_t k, pmt::pmt_t v, bool invert)
 {
     return gnuradio::get_initial_sptr(new pdu_filter_impl(k, v, invert));
--- gnuradio-3.8.1.0/gr-blocks/lib/pdu_remove_impl.cc~	2020-06-03 16:56:03.653466103 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/pdu_remove_impl.cc	2020-06-03 16:56:05.132466450 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 pdu_remove::sptr pdu_remove::make(pmt::pmt_t k)
 {
     return gnuradio::get_initial_sptr(new pdu_remove_impl(k));
--- gnuradio-3.8.1.0/gr-blocks/lib/pdu_set_impl.cc~	2020-06-03 16:55:43.765461437 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/pdu_set_impl.cc	2020-06-03 16:55:45.990461957 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 pdu_set::sptr pdu_set::make(pmt::pmt_t k, pmt::pmt_t v)
 {
     return gnuradio::get_initial_sptr(new pdu_set_impl(k, v));
--- gnuradio-3.8.1.0/gr-blocks/lib/random_pdu_impl.cc~	2020-06-03 16:56:32.885472969 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/random_pdu_impl.cc	2020-06-03 16:56:34.848473430 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 random_pdu::sptr
 random_pdu::make(int min_items, int max_items, unsigned char byte_mask, int length_modulo)
 {
--- gnuradio-3.8.1.0/gr-blocks/lib/repeat_impl.cc~	2020-06-03 16:57:12.092482177 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/repeat_impl.cc	2020-06-03 16:57:13.822482583 +0100
@@ -30,6 +30,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 repeat::sptr repeat::make(size_t itemsize, int interp)
 {
     return gnuradio::get_initial_sptr(new repeat_impl(itemsize, interp));
--- gnuradio-3.8.1.0/gr-zeromq/lib/push_msg_sink_impl.cc~	2020-06-03 16:48:54.673302712 +0100
+++ gnuradio-3.8.1.0/gr-zeromq/lib/push_msg_sink_impl.cc	2020-06-03 16:47:55.975276324 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace zeromq {
 
+using namespace boost::placeholders;
+
 push_msg_sink::sptr push_msg_sink::make(char* address, int timeout, bool bind)
 {
     return gnuradio::get_initial_sptr(new push_msg_sink_impl(address, timeout, bind));
--- gnuradio-3.8.1.0/gr-blocks/lib/socket_pdu_impl.cc~	2020-06-03 17:20:39.245825015 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/socket_pdu_impl.cc	2020-06-03 17:20:52.819828566 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 socket_pdu::sptr socket_pdu::make(std::string type,
                                   std::string addr,
                                   std::string port,
--- gnuradio-3.8.1.0/gr-zeromq/lib/pub_msg_sink_impl.cc~	2020-06-03 17:21:50.046843529 +0100
+++ gnuradio-3.8.1.0/gr-zeromq/lib/pub_msg_sink_impl.cc	2020-06-03 17:21:57.819845564 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace zeromq {
 
+using namespace boost::placeholders;
+
 pub_msg_sink::sptr pub_msg_sink::make(char* address, int timeout, bool bind)
 {
     return gnuradio::get_initial_sptr(new pub_msg_sink_impl(address, timeout, bool));
--- gnuradio-3.8.1.0/gr-blocks/lib/tagged_stream_multiply_length_impl.cc~	2020-06-03 17:35:50.436093636 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/tagged_stream_multiply_length_impl.cc	2020-06-03 17:36:01.704097517 +0100
@@ -30,6 +30,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 tagged_stream_multiply_length::sptr tagged_stream_multiply_length::make(
     size_t itemsize, const std::string& lengthtagname, double scalar)
 {
--- gnuradio-3.8.1.0/gr-blocks/lib/tuntap_pdu_impl.cc~	2020-06-03 17:46:10.583307228 +0100
+++ gnuradio-3.8.1.0/gr-blocks/lib/tuntap_pdu_impl.cc	2020-06-03 17:46:23.642311727 +0100
@@ -42,6 +42,8 @@
 namespace gr {
 namespace blocks {
 
+using namespace boost::placeholders;
+
 tuntap_pdu::sptr tuntap_pdu::make(std::string dev, int MTU, bool istunflag)
 {
 #if (defined(linux) || defined(__linux) || defined(__linux__))
--- gnuradio-3.8.1.0/gr-fec/lib/async_encoder_impl.cc~	2020-06-03 17:53:59.572468794 +0100
+++ gnuradio-3.8.1.0/gr-fec/lib/async_encoder_impl.cc	2020-06-03 17:54:10.438472537 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace fec {
 
+using namespace boost::placeholders;
+
 async_encoder::sptr async_encoder::make(generic_encoder::sptr my_encoder,
                                         bool packed,
                                         bool rev_unpack,
--- gnuradio-3.8.1.0/gr-fec/lib/async_decoder_impl.cc~	2020-06-03 17:54:23.920477182 +0100
+++ gnuradio-3.8.1.0/gr-fec/lib/async_decoder_impl.cc	2020-06-03 17:54:33.581480511 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace fec {
 
+using namespace boost::placeholders;
+
 async_decoder::sptr
 async_decoder::make(generic_decoder::sptr my_decoder, bool packed, bool rev_pack, int mtu)
 {
--- gnuradio-3.8.1.0/gr-filter/lib/freq_xlating_fir_filter_impl.cc~	2020-06-03 17:54:45.106484482 +0100
+++ gnuradio-3.8.1.0/gr-filter/lib/freq_xlating_fir_filter_impl.cc	2020-06-03 17:54:57.687488823 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace filter {
 
+using namespace boost::placeholders;
+
 template <class IN_T, class OUT_T, class TAP_T>
 typename freq_xlating_fir_filter<IN_T, OUT_T, TAP_T>::sptr
 freq_xlating_fir_filter<IN_T, OUT_T, TAP_T>::make(int decimation,
--- gnuradio-3.8.1.0/gr-filter/lib/mmse_resampler_ff_impl.cc~	2020-06-03 18:11:26.622789087 +0100
+++ gnuradio-3.8.1.0/gr-filter/lib/mmse_resampler_ff_impl.cc	2020-06-03 18:11:49.178794574 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace filter {
 
+using namespace boost::placeholders;
+
 mmse_resampler_ff::sptr mmse_resampler_ff::make(float phase_shift, float resamp_ratio)
 {
     return gnuradio::get_initial_sptr(
--- gnuradio-3.8.1.0/gr-filter/lib/mmse_resampler_cc_impl.cc~	2020-06-03 18:12:00.982797440 +0100
+++ gnuradio-3.8.1.0/gr-filter/lib/mmse_resampler_cc_impl.cc	2020-06-03 18:12:09.225799444 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace filter {
 
+using namespace boost::placeholders;
+
 mmse_resampler_cc::sptr mmse_resampler_cc::make(float phase_shift, float resamp_ratio)
 {
     return gnuradio::get_initial_sptr(
--- gnuradio-3.8.1.0/gr-qtgui/lib/freq_sink_f_impl.cc~	2020-06-03 18:33:55.755116400 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/freq_sink_f_impl.cc	2020-06-03 18:34:05.401118739 +0100
@@ -37,6 +37,7 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
 
 freq_sink_f::sptr freq_sink_f::make(int fftsize,
                                     int wintype,
--- gnuradio-3.8.1.0/gr-qtgui/lib/freq_sink_c_impl.cc~	2020-06-03 18:34:16.116121337 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/freq_sink_c_impl.cc	2020-06-03 18:34:26.130123766 +0100
@@ -38,6 +38,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 freq_sink_c::sptr freq_sink_c::make(int fftsize,
                                     int wintype,
                                     double fc,
--- gnuradio-3.8.1.0/gr-qtgui/lib/time_raster_sink_f_impl.cc~	2020-06-03 18:34:49.413129410 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/time_raster_sink_f_impl.cc	2020-06-03 18:35:00.258132040 +0100
@@ -36,6 +36,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 time_raster_sink_f::sptr time_raster_sink_f::make(double samp_rate,
                                                   double rows,
                                                   double cols,
--- gnuradio-3.8.1.0/gr-qtgui/lib/time_raster_sink_b_impl.cc~	2020-06-03 18:35:16.004135858 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/time_raster_sink_b_impl.cc	2020-06-03 18:35:28.818138965 +0100
@@ -36,6 +36,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 time_raster_sink_b::sptr time_raster_sink_b::make(double samp_rate,
                                                   double rows,
                                                   double cols,
--- gnuradio-3.8.1.0/gr-qtgui/lib/time_sink_f_impl.cc~	2020-06-03 18:35:46.982143370 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/time_sink_f_impl.cc	2020-06-03 18:35:58.555146176 +0100
@@ -40,6 +40,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 time_sink_f::sptr time_sink_f::make(int size,
                                     double samp_rate,
                                     const std::string& name,
--- gnuradio-3.8.1.0/gr-qtgui/lib/time_sink_c_impl.cc~	2020-06-03 18:36:10.189148997 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/time_sink_c_impl.cc	2020-06-03 18:36:21.394151714 +0100
@@ -39,6 +39,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 time_sink_c::sptr time_sink_c::make(int size,
                                     double samp_rate,
                                     const std::string& name,
--- gnuradio-3.8.1.0/gr-qtgui/lib/sink_f_impl.cc~	2020-06-03 18:36:31.583154184 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/sink_f_impl.cc	2020-06-03 18:36:41.626156620 +0100
@@ -36,6 +36,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 sink_f::sptr sink_f::make(int fftsize,
                           int wintype,
                           double fc,
--- gnuradio-3.8.1.0/gr-qtgui/lib/sink_c_impl.cc~	2020-06-03 18:36:54.167159661 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/sink_c_impl.cc	2020-06-03 18:37:04.898162263 +0100
@@ -36,6 +36,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 sink_c::sptr sink_c::make(int fftsize,
                           int wintype,
                           double fc,
--- gnuradio-3.8.1.0/gr-analog/lib/sig_source_impl.cc~	2020-06-03 18:37:26.774167567 +0100
+++ gnuradio-3.8.1.0/gr-analog/lib/sig_source_impl.cc	2020-06-03 18:37:38.170170330 +0100
@@ -36,6 +36,8 @@
 namespace gr {
 namespace analog {
 
+using namespace boost::placeholders;
+
 template <class T>
 typename sig_source<T>::sptr sig_source<T>::make(double sampling_freq,
                                                  gr_waveform_t waveform,
--- gnuradio-3.8.1.0/gr-digital/lib/chunks_to_symbols_impl.cc~	2020-06-03 19:28:24.388506913 +0100
+++ gnuradio-3.8.1.0/gr-digital/lib/chunks_to_symbols_impl.cc	2020-06-03 19:28:36.713514932 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace digital {
 
+using namespace boost::placeholders;
+
 template <class IN_T, class OUT_T>
 typename chunks_to_symbols<IN_T, OUT_T>::sptr
 chunks_to_symbols<IN_T, OUT_T>::make(const std::vector<OUT_T>& symbol_table, const int D)
--- gnuradio-3.8.1.0/gr-digital/lib/constellation_receiver_cb_impl.cc~	2020-06-03 19:28:46.334521192 +0100
+++ gnuradio-3.8.1.0/gr-digital/lib/constellation_receiver_cb_impl.cc	2020-06-03 19:28:57.697528585 +0100
@@ -34,6 +34,8 @@
 namespace gr {
 namespace digital {
 
+using namespace boost::placeholders;
+
 #define VERBOSE_MM 0     // Used for debugging symbol timing loop
 #define VERBOSE_COSTAS 0 // Used for debugging phase and frequency tracking
 
--- gnuradio-3.8.1.0/gr-digital/lib/costas_loop_cc_impl.cc~	2020-06-03 19:29:06.799534507 +0100
+++ gnuradio-3.8.1.0/gr-digital/lib/costas_loop_cc_impl.cc	2020-06-03 19:29:16.802541015 +0100
@@ -34,6 +34,8 @@
 namespace gr {
 namespace digital {
 
+using namespace boost::placeholders;
+
 costas_loop_cc::sptr costas_loop_cc::make(float loop_bw, int order, bool use_snr)
 {
     return gnuradio::get_initial_sptr(new costas_loop_cc_impl(loop_bw, order, use_snr));
--- gnuradio-3.8.1.0/gr-qtgui/lib/const_sink_c_impl.cc~	2020-06-03 19:29:29.694549403 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/const_sink_c_impl.cc	2020-06-03 19:29:38.089554865 +0100
@@ -35,6 +35,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 const_sink_c::sptr
 const_sink_c::make(int size, const std::string& name, int nconnections, QWidget* parent)
 {
--- gnuradio-3.8.1.0/gr-digital/lib/crc32_async_bb_impl.cc~	2020-06-03 19:29:48.487561630 +0100
+++ gnuradio-3.8.1.0/gr-digital/lib/crc32_async_bb_impl.cc	2020-06-03 19:30:02.250570584 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace digital {
 
+using namespace boost::placeholders;
+
 crc32_async_bb::sptr crc32_async_bb::make(bool check)
 {
     return gnuradio::get_initial_sptr(new crc32_async_bb_impl(check));
--- gnuradio-3.8.1.0/gr-qtgui/lib/waterfall_sink_f_impl.cc~	2020-06-03 19:30:17.822580714 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/waterfall_sink_f_impl.cc	2020-06-03 19:30:28.490587655 +0100
@@ -37,6 +37,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 waterfall_sink_f::sptr waterfall_sink_f::make(int fftsize,
                                               int wintype,
                                               double fc,
--- gnuradio-3.8.1.0/gr-qtgui/lib/waterfall_sink_c_impl.cc~	2020-06-03 19:32:58.390685182 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/waterfall_sink_c_impl.cc	2020-06-03 19:33:14.002695338 +0100
@@ -39,6 +39,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 waterfall_sink_c::sptr waterfall_sink_c::make(int fftsize,
                                               int wintype,
                                               double fc,
--- gnuradio-3.8.1.0/gr-qtgui/lib/histogram_sink_f_impl.cc~	2020-06-03 19:33:35.366709261 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/histogram_sink_f_impl.cc	2020-06-03 19:33:41.602713329 +0100
@@ -37,6 +37,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 histogram_sink_f::sptr histogram_sink_f::make(int size,
                                               int bins,
                                               double xmin,
--- gnuradio-3.8.1.0/gr-qtgui/lib/edit_box_msg_impl.cc~	2020-06-03 19:33:51.836719995 +0100
+++ gnuradio-3.8.1.0/gr-qtgui/lib/edit_box_msg_impl.cc	2020-06-03 19:34:00.055725357 +0100
@@ -35,6 +35,8 @@
 namespace gr {
 namespace qtgui {
 
+using namespace boost::placeholders;
+
 edit_box_msg::sptr edit_box_msg::make(data_type_t type,
                                       const std::string& label,
                                       const std::string& value,
--- gnuradio-3.8.1.0/gr-digital/lib/header_payload_demux_impl.cc~	2020-06-03 19:34:13.356734041 +0100
+++ gnuradio-3.8.1.0/gr-digital/lib/header_payload_demux_impl.cc	2020-06-03 19:34:20.622738782 +0100
@@ -31,6 +31,8 @@
 namespace gr {
 namespace digital {
 
+using namespace boost::placeholders;
+
 const pmt::pmt_t header_payload_demux_impl::msg_port_id()
 {
     static const pmt::pmt_t msg_port_id = pmt::mp("header_data");
--- gnuradio-3.8.1.0/gr-digital/lib/protocol_formatter_async_impl.cc~	2020-06-03 19:34:29.133744331 +0100
+++ gnuradio-3.8.1.0/gr-digital/lib/protocol_formatter_async_impl.cc	2020-06-03 19:34:34.557747861 +0100
@@ -32,6 +32,8 @@
 namespace gr {
 namespace digital {
 
+using namespace boost::placeholders;
+
 protocol_formatter_async::sptr
 protocol_formatter_async::make(const header_format_base::sptr& format)
 {
