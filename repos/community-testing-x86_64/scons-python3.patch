--- glob2-0.9.4.4/SConstruct.orig	2019-07-26 18:18:48.365048391 +0000
+++ glob2-0.9.4.4/SConstruct	2019-07-26 18:23:10.541667260 +0000
@@ -75,31 +75,31 @@
     env.Append(CPPDEFINES=["HAVE_CONFIG_H"])
     #Simple checks for required libraries
     if not conf.CheckLib("SDL") and not server_only:
-        print "Could not find libSDL"
+        print ("Could not find libSDL")
         missing.append("SDL")
     if not conf.CheckLib("SDL_ttf") and not server_only:
-        print "Could not find libSDL_ttf"
+        print ("Could not find libSDL_ttf")
         missing.append("SDL_ttf")
     if not conf.CheckLib("SDL_image") and not server_only:
-        print "Could not find libSDL_image"
+        print ("Could not find libSDL_image")
         missing.append("SDL_image")
     if not conf.CheckLib("SDL_net") and not server_only:
-        print "Could not find libSDL_net"
+        print ("Could not find libSDL_net")
         missing.append("SDL_net")
     if not conf.CheckLib("speex") or not conf.CheckCXXHeader("speex/speex.h") and not server_only:
-        print "Could not find libspeex or could not find 'speex/speex.h'"
+        print ("Could not find libspeex or could not find 'speex/speex.h'")
         missing.append("speex")
     if not conf.CheckLib("vorbisfile") and not server_only:
-        print "Could not find libvorbisfile"
+        print ("Could not find libvorbisfile")
         missing.append("vorbisfile")
     if not conf.CheckLib("vorbis") and not server_only:
-        print "Could not find libvorbis"
+        print ("Could not find libvorbis")
         missing.append("vorbis")
     if not conf.CheckLib("ogg") and not server_only:
-        print "Could not find libogg"
+        print ("Could not find libogg")
         missing.append("ogg")
     if not conf.CheckCXXHeader("zlib.h"):
-        print "Could not find zlib.h"
+        print ("Could not find zlib.h")
         missing.append("zlib")
     else:
         if conf.CheckLib("z"):
@@ -107,7 +107,7 @@
         elif conf.CheckLib("zlib1"):
             env.Append(LIBS="zlib1")
         else:
-            print "Could not find libz or zlib1.dll"
+            print ("Could not find libz or zlib1.dll")
             missing.append("zlib")
 
     boost_thread = ''
@@ -116,7 +116,7 @@
     elif conf.CheckLib("boost_thread-mt") and conf.CheckCXXHeader("boost/thread/thread.hpp"):
         boost_thread="boost_thread-mt"
     else:
-        print "Could not find libboost_thread or libboost_thread-mt or boost/thread/thread.hpp"
+        print ("Could not find libboost_thread or libboost_thread-mt or boost/thread/thread.hpp")
         missing.append("libboost_thread")
     env.Append(LIBS=[boost_thread])
 
@@ -126,31 +126,31 @@
     elif conf.CheckLib("boost_date_time-mt") and conf.CheckCXXHeader("boost/date_time/posix_time/posix_time.hpp"):
         boost_thread="boost_thread-mt"
     else:
-        print "Could not find libboost_date_time or libboost_date_time-mt or boost/thread/thread.hpp"
+        print ("Could not find libboost_date_time or libboost_date_time-mt or boost/thread/thread.hpp")
         missing.append("libboost_date_time")
     env.Append(LIBS=[boost_date_time])
 
 
     if not conf.CheckCXXHeader("boost/shared_ptr.hpp"):
-        print "Could not find boost/shared_ptr.hpp"
+        print ("Could not find boost/shared_ptr.hpp")
         missing.append("boost/shared_ptr.hpp")
     if not conf.CheckCXXHeader("boost/tuple/tuple.hpp"):
-        print "Could not find boost/tuple/tuple.hpp"
+        print ("Could not find boost/tuple/tuple.hpp")
         missing.append("boost/tuple/tuple.hpp")
     if not conf.CheckCXXHeader("boost/tuple/tuple_comparison.hpp"):
-        print "Could not find boost/tuple/tuple_comparison.hpp"
+        print ("Could not find boost/tuple/tuple_comparison.hpp")
         missing.append("boost/tuple/tuple_comparison.hpp")
     if not conf.CheckCXXHeader("boost/logic/tribool.hpp"):
-        print "Could not find boost/logic/tribool.hpp"
+        print ("Could not find boost/logic/tribool.hpp")
         missing.append("boost/logic/tribool.hpp")
     if not conf.CheckCXXHeader("boost/lexical_cast.hpp"):
-        print "Could not find boost/lexical_cast.hpp"
+        print ("Could not find boost/lexical_cast.hpp")
         missing.append("boost/lexical_cast.hpp")
 
     #Do checks for OpenGL, which is different on every system
     gl_libraries = []
     if isDarwinPlatform and not server_only:
-        print "Using Apple's OpenGL framework"
+        print ("Using Apple's OpenGL framework")
         env.Append(FRAMEWORKS="OpenGL")
     elif conf.CheckLib("GL") and conf.CheckCXXHeader("GL/gl.h") and not server_only:
         gl_libraries.append("GL")
@@ -159,12 +159,12 @@
     elif conf.CheckLib("opengl32") and conf.CheckCXXHeader("GL/gl.h") and not server_only:
         gl_libraries.append("opengl32")
     elif not server_only:
-        print "Could not find libGL or opengl32, or could not find GL/gl.h or OpenGL/gl.h"
+        print ("Could not find libGL or opengl32, or could not find GL/gl.h or OpenGL/gl.h")
         missing.append("OpenGL")
 
     #Do checks for GLU, which is different on every system
     if isDarwinPlatform and not server_only:
-        print "Using Apple's GLUT framework"
+        print ("Using Apple's GLUT framework")
         env.Append(FRAMEWORKS="GLUT")
     elif conf.CheckLib('GLU') and conf.CheckCXXHeader("GL/glu.h") and not server_only:
         gl_libraries.append("GLU")
@@ -173,7 +173,7 @@
     elif conf.CheckLib('glu32') and conf.CheckCXXHeader('GL/glu.h') and not server_only:
         gl_libraries.append("glu32")
     elif not server_only:
-        print "Could not find libGLU or glu32, or could not find GL/glu.h or OpenGL/glu.h"
+        print ("Could not find libGLU or glu32, or could not find GL/glu.h or OpenGL/glu.h")
         missing.append("GLU")
 
     if gl_libraries or isDarwinPlatform:
@@ -188,31 +188,31 @@
     #Do checks for portaudio
     if conf.CheckLib('portaudio') and conf.CheckCXXHeader('portaudio.h'):
         if env['mingw'] or isWindowsPlatform:
-            print "--------"
-            print "NOTE: It appears you are compiling under Windows. At this stage, PortAudio crashes Globulation 2 when voice chat is used."
-            print "NOTE: Disabling PortAudio in this build (you will be unable to use Voice Chat ingame)."
-            print "--------"
+            print ("--------")
+            print ("NOTE: It appears you are compiling under Windows. At this stage, PortAudio crashes Globulation 2 when voice chat is used.")
+            print ("NOTE: Disabling PortAudio in this build (you will be unable to use Voice Chat ingame).")
+            print ("--------")
         else:
             if GetOption('portaudio'):
-                print "trying to use portaudio"
+                print ("trying to use portaudio")
                 configfile.add("HAVE_PORTAUDIO ", "Defined when Port Audio support is present and compiled")
                 env.Append(LIBS=['portaudio'])
             else:
-                print "         no portaudio"
-                print "         no portaudio - although portaudio was found to be installed, you have "
-                print "         no portaudio - to explicitly activate it using: "
-                print "         no portaudio - $ scons --portaudio=true"
-                print "         no portaudio - this may not work properly if the version of portaudio"
-                print "         no portaudio - is wrong. portaudio is used to allow communicating over VOIP"
-                print "         no portaudio"
-                print "         no portaudio - if you know of a solution to detect portaudio version"
-                print "         no portaudio - let us know at:"
-                print "         no portaudio - https://savannah.nongnu.org/bugs/index.php?24668"
-                print "         no portaudio"
+                print ("         no portaudio")
+                print ("         no portaudio - although portaudio was found to be installed, you have ")
+                print ("         no portaudio - to explicitly activate it using: ")
+                print ("         no portaudio - $ scons --portaudio=true")
+                print ("         no portaudio - this may not work properly if the version of portaudio")
+                print ("         no portaudio - is wrong. portaudio is used to allow communicating over VOIP")
+                print ("         no portaudio")
+                print ("         no portaudio - if you know of a solution to detect portaudio version")
+                print ("         no portaudio - let us know at:")
+                print ("         no portaudio - https://savannah.nongnu.org/bugs/index.php?24668")
+                print ("         no portaudio")
 
     if missing:
         for t in missing:
-            print "Missing %s" % t
+            print ("Missing %s" % t)
         Exit(1)
 
     conf.Finish()
@@ -232,7 +232,7 @@
         env.Clone = env.Copy
 
     if not env['CC']:
-        print "No compiler found in PATH. Please install gcc or another compiler."
+        print ("No compiler found in PATH. Please install gcc or another compiler.")
         Exit(1)
 
     env["VERSION"] = "0.9.4.4"
--- glob2-0.9.4.4/scons/bundle.py.orig	2019-07-26 18:25:20.693318523 +0000
+++ glob2-0.9.4.4/scons/bundle.py	2019-07-26 18:25:50.130360077 +0000
@@ -4,10 +4,10 @@
 from addDependentLibsToBundle import addDependentLibsToBundle
 
 def run(command) :
-	print "\033[32m:: ", command, "\033[0m"
+	print ("\033[32m:: ", command, "\033[0m")
 	return os.system(command)
 def norun(command) :
-	print "\033[31mXX ", command, "\033[0m"
+	print ("\033[31mXX ", command, "\033[0m")
 
 
 
@@ -46,7 +46,7 @@
 	return target, source
 
 def generate(env) :
-	print "Loading Bundle tool"
+	print ("Loading Bundle tool")
 	Builder = SCons.Builder.Builder
 	Action = SCons.Action.Action
 	bundleBuilder = Builder(
--- glob2-0.9.4.4/scons/addDependentLibsToBundle.py.orig	2019-07-26 18:27:04.774645968 +0000
+++ glob2-0.9.4.4/scons/addDependentLibsToBundle.py	2019-07-26 18:27:29.854966622 +0000
@@ -4,10 +4,10 @@
 import sys
 
 def run(command) :
-	print "\033[32m:: ", command, "\033[0m"
+	print ("\033[32m:: ", command, "\033[0m")
 	return os.system(command)
 def norun(command) :
-	print "\033[31mXX ", command, "\033[0m"
+	print ("\033[31mXX ", command, "\033[0m")
 
 
 def needsChange(binary, blacklist) :
--- glob2-0.9.4.4/scons/dmg.py.orig	2019-07-26 18:28:29.269060631 +0000
+++ glob2-0.9.4.4/scons/dmg.py	2019-07-26 18:28:45.099263555 +0000
@@ -15,7 +15,7 @@
 
 def generate(env) :
 	"""Add Builders and construction variables for qt to an Environment."""
-	print "Lodading dmg tool..."
+	print ("Lodading dmg tool...")
 	env.Append( BUILDERS={'Dmg' : 
 			env.Builder( action=env.Action(create_dmg, create_dmg_message ))
 		} )
--- glob2-0.9.4.4/scons/nsis.py.orig	2019-07-26 18:29:44.103353972 +0000
+++ glob2-0.9.4.4/scons/nsis.py	2019-07-26 18:30:04.393614598 +0000
@@ -10,7 +10,7 @@
 
 def generate(env) :
 	"""Add Builders and construction variables for qt to an Environment."""
-	print "Loading nsis tool..."
+	print ("Loading nsis tool...")
 
 	Builder = SCons.Builder.Builder
 
