diff --git a/CMakeLists.txt b/CMakeLists.txt
index 19df9d1..30054f2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -154,7 +154,7 @@ endif()
 # Global language settings
 
 if (NOT CMAKE_CXX_STANDARD)
-    set(CMAKE_CXX_STANDARD 14)
+    set(CMAKE_CXX_STANDARD 17)
 endif()
 
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
@@ -259,9 +259,6 @@ else()
     set(USE_DEPS_IMATH ON)
 endif()
 
-# set up the internally hosted dependencies
-add_subdirectory(src/deps)
-
 set (OTIO_IMATH_TARGETS
     # For OpenEXR/Imath 3.x:
     $<TARGET_NAME_IF_EXISTS:Imath::Imath>
diff --git a/src/opentimelineio/any.h b/src/opentimelineio/any.h
index 5a55ee4..37127de 100644
--- a/src/opentimelineio/any.h
+++ b/src/opentimelineio/any.h
@@ -3,12 +3,12 @@
 
 #pragma once
 
-#include "any/any.hpp"
+#include <any>
 #include "opentimelineio/version.h"
 
 namespace opentimelineio { namespace OPENTIMELINEIO_VERSION {
 
-using linb::any;
-using linb::any_cast;
+using std::any;
+using std::any_cast;
 
 }} // namespace opentimelineio::OPENTIMELINEIO_VERSION
diff --git a/src/opentimelineio/optional.h b/src/opentimelineio/optional.h
index 8b8521b..8229009 100644
--- a/src/opentimelineio/optional.h
+++ b/src/opentimelineio/optional.h
@@ -3,13 +3,13 @@
 
 #pragma once
 
-#include "nonstd/optional.hpp"
+#include <optional>
 #include "opentimelineio/version.h"
 
 namespace opentimelineio { namespace OPENTIMELINEIO_VERSION {
 
-using nonstd::nullopt;
-using nonstd::nullopt_t;
-using nonstd::optional;
+using std::nullopt;
+using std::nullopt_t;
+using std::optional;
 
 }} // namespace opentimelineio::OPENTIMELINEIO_VERSION
diff --git a/src/opentimelineio/serialization.cpp b/src/opentimelineio/serialization.cpp
index 32f107d..bcb126e 100644
--- a/src/opentimelineio/serialization.cpp
+++ b/src/opentimelineio/serialization.cpp
@@ -3,7 +3,7 @@
 
 #include "opentimelineio/serialization.h"
 #include "errorStatus.h"
-#include "nonstd/optional.hpp"
+#include <optional>
 #include "opentimelineio/anyDictionary.h"
 #include "opentimelineio/serializableObject.h"
 #include "opentimelineio/unknownSchema.h"
@@ -1032,7 +1032,7 @@ SerializableObject::Writer::write(
 
     // write the contents of the object to the encoder, either the downgraded
     // anydictionary or the SerializableObject
-    if (!(downgraded.empty()))
+    if (downgraded.has_value())
     {
         for (const auto& kv: any_cast<AnyDictionary>(downgraded))
         {
diff --git a/src/py-opentimelineio/opentime-bindings/CMakeLists.txt b/src/py-opentimelineio/opentime-bindings/CMakeLists.txt
index bd92bbf..bdd9fd0 100644
--- a/src/py-opentimelineio/opentime-bindings/CMakeLists.txt
+++ b/src/py-opentimelineio/opentime-bindings/CMakeLists.txt
@@ -1,6 +1,7 @@
 #------------------------------------------------------------------------------
 # py-opentimelineio/opentime-bindings/CMakeLists.txt
 
+find_package(pybind11)
 pybind11_add_module(_opentime
                     opentime_bindings.cpp
                     opentime_rationalTime.cpp
diff --git a/src/py-opentimelineio/opentimelineio-bindings/CMakeLists.txt b/src/py-opentimelineio/opentimelineio-bindings/CMakeLists.txt
index d37da36..8202fbc 100644
--- a/src/py-opentimelineio/opentimelineio-bindings/CMakeLists.txt
+++ b/src/py-opentimelineio/opentimelineio-bindings/CMakeLists.txt
@@ -7,6 +7,7 @@ set(_OTIO_HEADER_FILES
     otio_bindings.h
     otio_utils.h)
 
+find_package(pybind11)
 pybind11_add_module(_otio
                     otio_errorStatusHandler.cpp
                     otio_anyDictionary.cpp
diff --git a/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h b/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h
index da70920..60d10b0 100644
--- a/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h
+++ b/src/py-opentimelineio/opentimelineio-bindings/otio_utils.h
@@ -17,14 +17,6 @@ using namespace opentimelineio::OPENTIMELINEIO_VERSION;
 
 void install_external_keepalive_monitor(SerializableObject* so, bool apply_now);
 
-namespace pybind11 { namespace detail {
-    template<typename T> struct type_caster<optional<T>>
-        : public optional_caster<optional<T>> {};
-
-    template<> struct type_caster<nullopt_t>
-        : public void_caster<nullopt_t> {};
-}}
-
 template <typename T>
 struct managing_ptr {
     managing_ptr(T* ptr)
