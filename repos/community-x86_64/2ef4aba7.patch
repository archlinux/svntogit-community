From 2ef4aba78644e970b5e57d33956c459698bf41f0 Mon Sep 17 00:00:00 2001
From: pchintalapudi <34727397+pchintalapudi@users.noreply.github.com>
Date: Sat, 17 Sep 2022 01:47:13 -0400
Subject: [PATCH] Changes to support LLVM15 compilation (#46788)

---
 src/aotcompile.cpp                |  7 +++++--
 src/codegen.cpp                   |  4 ++--
 src/debug-registry.h              |  1 +
 src/debuginfo.cpp                 | 12 +++++-------
 src/disasm.cpp                    | 20 ++++++++++++++------
 src/jitlayers.cpp                 |  4 +---
 src/llvm-alloc-opt.cpp            |  2 +-
 src/llvm-cpufeatures.cpp          |  1 -
 src/llvm-final-gc-lowering.cpp    |  2 +-
 src/llvm-late-gc-lowering.cpp     |  3 ++-
 src/llvm-propagate-addrspaces.cpp |  3 +--
 src/llvm-remove-addrspaces.cpp    |  3 +--
 src/pipeline.cpp                  |  8 ++++++--
 13 files changed, 40 insertions(+), 30 deletions(-)

diff --git a/src/aotcompile.cpp b/src/aotcompile.cpp
index 9ba46687081d..98777ddd175a 100644
--- a/src/aotcompile.cpp
+++ b/src/aotcompile.cpp
@@ -34,6 +34,7 @@
 #include <llvm/Transforms/IPO/AlwaysInliner.h>
 #include <llvm/Transforms/InstCombine/InstCombine.h>
 #include <llvm/Transforms/Scalar/InstSimplifyPass.h>
+#include <llvm/Transforms/Scalar/SimpleLoopUnswitch.h>
 #include <llvm/Transforms/Utils/SimplifyCFGOptions.h>
 #include <llvm/Transforms/Utils/ModuleUtils.h>
 #include <llvm/Passes/PassBuilder.h>
@@ -59,8 +60,6 @@
 
 using namespace llvm;
 
-#include "julia.h"
-#include "julia_internal.h"
 #include "jitlayers.h"
 #include "julia_assert.h"
 
@@ -814,7 +813,11 @@ void addOptimizationPasses(legacy::PassManagerBase *PM, int opt_level,
     PM->add(createLowerSimdLoopPass()); // Annotate loop marked with "loopinfo" as LLVM parallel loop
     PM->add(createLICMPass());
     PM->add(createJuliaLICMPass());
+#if JL_LLVM_VERSION >= 150000
+    PM->add(createSimpleLoopUnswitchLegacyPass());
+#else
     PM->add(createLoopUnswitchPass());
+#endif
     PM->add(createLICMPass());
     PM->add(createJuliaLICMPass());
     PM->add(createInductiveRangeCheckEliminationPass()); // Must come before indvars
diff --git a/src/codegen.cpp b/src/codegen.cpp
index 0346393ea67c..e76eb9e511af 100644
--- a/src/codegen.cpp
+++ b/src/codegen.cpp
@@ -155,8 +155,6 @@ typedef Instruction TerminatorInst;
 #define NOMINMAX
 #endif
 
-#include "julia.h"
-#include "julia_internal.h"
 #include "jitlayers.h"
 #include "codegen_shared.h"
 #include "processor.h"
@@ -8543,7 +8541,9 @@ extern "C" void jl_init_llvm(void)
     // Initialize passes
     PassRegistry &Registry = *PassRegistry::getPassRegistry();
     initializeCore(Registry);
+#if JL_LLVM_VERSION < 150000
     initializeCoroutines(Registry);
+#endif
     initializeScalarOpts(Registry);
     initializeVectorization(Registry);
     initializeAnalysis(Registry);
diff --git a/src/debuginfo.cpp b/src/debuginfo.cpp
index eba6ea793b71..fe5614100f9e 100644
--- a/src/debuginfo.cpp
+++ b/src/debuginfo.cpp
@@ -20,10 +20,13 @@
 #include <llvm/Object/COFF.h>
 #include <llvm/Object/ELFObjectFile.h>
 
+#ifdef _OS_DARWIN_
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 using namespace llvm;
 
-#include "julia.h"
-#include "julia_internal.h"
+#include "jitlayers.h"
 #include "debuginfo.h"
 #if defined(_OS_LINUX_)
 #  include <link.h>
@@ -41,8 +41,6 @@ using namespace llvm;
 #include <CoreFoundation/CoreFoundation.h>
 #endif
 
-#include "jitlayers.h"
-
 static JITDebugInfoRegistry &getJITDebugRegistry() JL_NOTSAFEPOINT {
     return jl_ExecutionEngine->getDebugInfoRegistry();
 }
diff --git a/src/disasm.cpp b/src/disasm.cpp
index 69692da4c4b1..cfc030f649fd 100644
--- a/src/disasm.cpp
+++ b/src/disasm.cpp
@@ -111,8 +111,6 @@
 
 #include <llvm-c/Disassembler.h>
 
-#include "julia.h"
-#include "julia_internal.h"
 #include "jitlayers.h"
 #include "processor.h"
 
@@ -796,7 +794,13 @@ static const char *SymbolLookup(void *DisInfo, uint64_t ReferenceValue, uint64_t
     return NULL;
 }
 
-static int OpInfoLookup(void *DisInfo, uint64_t PC, uint64_t Offset, uint64_t Size,
+static int OpInfoLookup(void *DisInfo, uint64_t PC,
+                        uint64_t Offset,
+#if JL_LLVM_VERSION < 150000
+                        uint64_t Size,
+#else
+                        uint64_t OpSize, uint64_t InstSize,
+#endif
                         int TagType, void *TagBuf)
 {
     SymbolTable *SymTab = (SymbolTable*)DisInfo;
@@ -1050,10 +1054,14 @@ static void jl_dump_asm_internal(
             MCInst Inst;
             MCDisassembler::DecodeStatus S;
             FuncMCView view = memoryObject.slice(Index);
+#if JL_LLVM_VERSION < 150000
+#define getCommentOS() GetCommentOS()
+#endif
             S = DisAsm->getInstruction(Inst, insSize, view, 0,
-                                      /*CStream*/ pass != 0 ? Streamer->GetCommentOS() : nulls());
-            if (pass != 0 && Streamer->GetCommentOS().tell() > 0)
-                Streamer->GetCommentOS() << '\n';
+                                      /*CStream*/ pass != 0 ? Streamer->getCommentOS () : nulls());
+            if (pass != 0 && Streamer->getCommentOS ().tell() > 0)
+                Streamer->getCommentOS () << '\n';
+#undef GetCommentOS
             switch (S) {
             case MCDisassembler::Fail:
                 if (insSize == 0) // skip illegible bytes
diff --git a/src/jitlayers.cpp b/src/jitlayers.cpp
index 78803e15e0dd..a08f92836bdb 100644
--- a/src/jitlayers.cpp
+++ b/src/jitlayers.cpp
@@ -36,8 +36,6 @@
 
 using namespace llvm;
 
-#include "julia.h"
-#include "julia_internal.h"
 #include "codegen_shared.h"
 #include "jitlayers.h"
 #include "julia_assert.h"
diff --git a/src/llvm-cpufeatures.cpp b/src/llvm-cpufeatures.cpp
index 1c21ddba49be..6211d284bdd2 100644
--- a/src/llvm-cpufeatures.cpp
+++ b/src/llvm-cpufeatures.cpp
@@ -26,7 +26,7 @@
 #include <llvm/Target/TargetMachine.h>
 #include <llvm/Support/Debug.h>
 
-#include "julia.h"
+#include "jitlayers.h"
 
 #define DEBUG_TYPE "cpufeatures"
 
diff --git a/src/llvm-final-gc-lowering.cpp b/src/llvm-final-gc-lowering.cpp
index 1f5bd34373c2..e7e9fe2f4f26 100644
--- a/src/llvm-final-gc-lowering.cpp
+++ b/src/llvm-final-gc-lowering.cpp
@@ -107,7 +107,7 @@ Value *FinalLowerGC::lowerNewGCFrame(CallInst *target, Function &F)
         ConstantInt::get(Type::getInt32Ty(F.getContext()), sizeof(jl_value_t*) * (nRoots + 2)), // len
         ConstantInt::get(Type::getInt1Ty(F.getContext()), 0)}; // volatile
     CallInst *zeroing = CallInst::Create(memset, makeArrayRef(args));
-    cast<MemSetInst>(zeroing)->setDestAlignment(16);
+    cast<MemSetInst>(zeroing)->setDestAlignment(Align(16));
     zeroing->setMetadata(LLVMContext::MD_tbaa, tbaa_gcframe);
     zeroing->insertAfter(tempSlot_i8);
 
diff --git a/src/llvm-late-gc-lowering.cpp b/src/llvm-late-gc-lowering.cpp
index 99d25d81a866..2441cf0ada10 100644
--- a/src/llvm-late-gc-lowering.cpp
+++ b/src/llvm-late-gc-lowering.cpp
@@ -2614,7 +2614,8 @@ void LateLowerGCFrame::PlaceRootsAndUpdateCalls(std::vector<int> &Colors, State
         unsigned AllocaSlot = 2; // first two words are metadata
         auto replace_alloca = [this, gcframe, &AllocaSlot, T_int32](AllocaInst *&AI) {
             // Pick a slot for the alloca.
-            unsigned align = AI->getAlignment() / sizeof(void*); // TODO: use DataLayout pointer size
+            AI->getAlign();
+            unsigned align = AI->getAlign().value() / sizeof(void*); // TODO: use DataLayout pointer size
             assert(align <= 16 / sizeof(void*) && "Alignment exceeds llvm-final-gc-lowering abilities");
             if (align > 1)
                 AllocaSlot = LLT_ALIGN(AllocaSlot, align);
diff --git a/src/llvm-propagate-addrspaces.cpp b/src/llvm-propagate-addrspaces.cpp
index 97ae9d0555a8..e2d390a5e439 100644
--- a/src/llvm-propagate-addrspaces.cpp
+++ b/src/llvm-propagate-addrspaces.cpp
@@ -22,8 +22,7 @@
 #include <llvm/Pass.h>
 #include <llvm/Support/Debug.h>
 
-#include "codegen_shared.h"
-#include "julia.h"
+#include "codegen_shared.h"
 
 #define DEBUG_TYPE "propagate_julia_addrspaces"
 
diff --git a/src/llvm-remove-addrspaces.cpp b/src/llvm-remove-addrspaces.cpp
index a3f3cbb1fee7..814e31ec2252 100644
--- a/src/llvm-remove-addrspaces.cpp
+++ b/src/llvm-remove-addrspaces.cpp
@@ -12,8 +12,7 @@
 #include <llvm/Transforms/Utils/Cloning.h>
 #include <llvm/Transforms/Utils/ValueMapper.h>
 
-#include "codegen_shared.h"
-#include "julia.h"
+#include "codegen_shared.h"
 
 #define DEBUG_TYPE "remove_addrspaces"
 
