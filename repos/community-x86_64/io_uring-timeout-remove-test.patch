diff -upr zig-0.9.1.orig/lib/std/os/linux/io_uring.zig zig-0.9.1/lib/std/os/linux/io_uring.zig
--- zig-0.9.1.orig/lib/std/os/linux/io_uring.zig	2022-02-14 22:03:19.000000000 +0200
+++ zig-0.9.1/lib/std/os/linux/io_uring.zig	2022-06-25 02:02:53.701051414 +0300
@@ -1994,7 +1994,7 @@ test "timeout_remove" {
 
     try testing.expectEqual(@as(u32, 2), try ring.submit());
 
-    const cqe_timeout = try ring.copy_cqe();
+    var cqe_timeout = try ring.copy_cqe();
     // IORING_OP_TIMEOUT_REMOVE is not supported by this kernel version:
     // Timeout remove operations set the fd to -1, which results in EBADF before EINVAL.
     // We use IORING_FEAT_RW_CUR_POS as a safety check here to make sure we are at least pre-5.6.
@@ -2005,13 +2005,22 @@ test "timeout_remove" {
     {
         return error.SkipZigTest;
     }
+
+    var cqe_timeout_remove = try ring.copy_cqe();
+
+    if (cqe_timeout.user_data == 0x99999999 and cqe_timeout_remove.user_data == 0x88888888) {
+        const a = cqe_timeout;
+        const b = cqe_timeout_remove;
+        cqe_timeout = b;
+        cqe_timeout_remove = a;
+    }
+
     try testing.expectEqual(linux.io_uring_cqe{
         .user_data = 0x88888888,
         .res = -@as(i32, @enumToInt(linux.E.CANCELED)),
         .flags = 0,
     }, cqe_timeout);
 
-    const cqe_timeout_remove = try ring.copy_cqe();
     try testing.expectEqual(linux.io_uring_cqe{
         .user_data = 0x99999999,
         .res = 0,
