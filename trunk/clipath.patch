diff --git a/src/vs/code/node/cli.ts b/src/vs/code/node/cli.ts
index 01f5c343bc6..acbc1789314 100644
--- a/src/vs/code/node/cli.ts
+++ b/src/vs/code/node/cli.ts
@@ -44,7 +44,7 @@ export async function main(argv: string[]): Promise<any> {
 	let args: NativeParsedArgs;
 
 	try {
-		args = parseCLIProcessArgv(argv);
+		args = parseCLIProcessArgv(argv.slice(Math.max(0, argv.findIndex(a => a.endsWith('/code.js')) - 1)));
 	} catch (err) {
 		console.error(err.message);
 		return;
diff --git a/src/vs/platform/native/electron-main/nativeHostMainService.ts b/src/vs/platform/native/electron-main/nativeHostMainService.ts
index c0f093010fc..9569dba5570 100644
--- a/src/vs/platform/native/electron-main/nativeHostMainService.ts
+++ b/src/vs/platform/native/electron-main/nativeHostMainService.ts
@@ -12,7 +12,7 @@ import { Emitter, Event } from 'vs/base/common/event';
 import { Disposable } from 'vs/base/common/lifecycle';
 import { Schemas } from 'vs/base/common/network';
 import { dirname, join, resolve } from 'vs/base/common/path';
-import { isLinux, isLinuxSnap, isMacintosh, isWindows } from 'vs/base/common/platform';
+import { isLinuxSnap, isMacintosh, isWindows } from 'vs/base/common/platform';
 import { AddFirstParameterToFunctions } from 'vs/base/common/types';
 import { URI } from 'vs/base/common/uri';
 import { realpath } from 'vs/base/node/extpath';
@@ -527,31 +527,7 @@ export class NativeHostMainService extends Disposable implements INativeHostMain
 
 	@memoize
 	private get cliPath(): string {
-
-		// Windows
-		if (isWindows) {
-			if (this.environmentMainService.isBuilt) {
-				return join(dirname(process.execPath), 'bin', `${this.productService.applicationName}.cmd`);
-			}
-
-			return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.bat');
-		}
-
-		// Linux
-		if (isLinux) {
-			if (this.environmentMainService.isBuilt) {
-				return join(dirname(process.execPath), 'bin', `${this.productService.applicationName}`);
-			}
-
-			return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');
-		}
-
-		// macOS
-		if (this.environmentMainService.isBuilt) {
-			return join(this.environmentMainService.appRoot, 'bin', 'code');
-		}
-
-		return join(this.environmentMainService.appRoot, 'scripts', 'code-cli.sh');
+		return '/usr/bin/code';
 	}
 
 	async getOSStatistics(): Promise<IOSStatistics> {
